// All prime number between a,b
void is_prime(int x){
    int count=0;
    for(int i=2; i<x; i++){
        if(x%i==0){
           count++; 
        }
    }
    if(count==0){
        cout<<x<<" ";
    }
}


// N Fibonaccci number printing
void fibo(int n){
    long long int t1=0, t2=1;
    long long int temp;
    for(int i=1; i<=n; i++){
        temp=t1+t2;
        cout<<t1<<" ";
        t1=t2;
        t2=temp;
    }
}



// Factorial of a number N;
int  factorial(int n){
    int temp=1;
    for(int i=n; i>=1; i--){
        temp=temp*i;
    }
    return temp;
}


// Sum of N natural numbers;
int sum(int n){
    int sum=0;
    for(int i=1; i<=n; i++){
        sum+=i;
    }
    return sum;
}


// Bool result in cheacking a pythagoras triplet;
bool pythog(int x,int y, int z){
    int maxx=max(x,max(y,z));
    
    if(maxx*maxx==x*x+y*y ||maxx*maxx==x*x+z*z || maxx*maxx==z*z+y*y ){
        return true;
    }
    return false;
}



// Buble sorting technique for N array elements;
void buble_sort(int n, int arr[]){
    int counter=1;
    while(counter<n){
        for(int i=0;i<n-counter; i++){
            if(arr[i]>arr[i+1]){
                int temp=arr[i];
                arr[i]=arr[i+1];
                arr[i+1]=temp;
            }
        }
        counter++;
    }
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
}


// length of maximum contigious arthmetic subarray;
int  long_subarr(int n, int arr[]){
    int k1=0;
    
    vector<int> vec;
    for(int i=0; i<n-1; i++){
        k1=arr[i+1]-arr[i];
        vec.push_back(k1);
    }
    int maxcount=0;
    for(int i=0; i<n-1; i++){
        int count=0;
        for(int j=i; j<n-1; j++ ){
            if( vec[j]==vec[j+1]){
                count++;
            }
        }
        if(count>maxcount){
            maxcount=count;
        }
    }
    
    return maxcount+2;
}



// max-sum of  subarray in an array;
int  subarr_maxsum(int n, int arr[]){
    int max_sum=0;
    for(int i=0; i<n; i++){
        for(int j=i; j<n; j++){
             int sum=0;
            for(int k=i; k<=j; k++){
                sum+=arr[k];
            }
            if(sum>max_sum){
                max_sum=sum;
            }
        }
    }
    return max_sum;
}


// Rearring the array terms by all even numbers following by all odd numbers;
void evenfirst(int n, int arr[]){
    vector<int >vec1;
    vector<int>vec2;
    for(int i=0; i<n; i++){
        if(arr[i]%2==0){
            vec1.push_back(arr[i]);
        }
        else{
            vec2.push_back(arr[i]);
        }
    }
     for(int j=0; j<vec2.size(); j++){
        
            vec1.push_back(vec2[j]);
        
    }
    for(int k=0; k<n; k++){
        cout<<vec1[k]<<" ";
    }
}

***********Transpose of an 2D-array**********
int n;
   cin>>n;
   int a[n][n];
   for(int i=0; i<n; i++){
       for(int j=0; j<n; j++){
           cin>>a[i][j];
       }
   }
  for(int i=0; i<n; i++){
        for(int j=i;j<n; j++){
            int temp=a[i][j];
            a[i][j]=a[j][i];
            a[j][i]=temp;
        }
    }
    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            cout<<a[i][j]<<" ";
        }
        cout<<endl;
    }



***************Multiplication of 2D array**********
  int n1,n2,n3;
   cin>>n1>>n2>>n3;
   int a1[n1][n2], b1[n2][n3], c1[n1][n3];
     for(int i=0; i<n1; i++){
       for(int j=0; j<n3; j++){
           c1[i][j]=0;
       }
   }
   for(int i=0; i<n1; i++){
       for(int j=0; j<n2; j++){
           cin>>a1[i][j];
       }
   }
   for(int i=0; i<n2; i++){
       for(int j=0; j<n3; j++){
           cin>>b1[i][j];
       }
   }
   
   for(int i=0; i<n1; i++){
       for(int j=0; j<n2; j++){
           for(int k=0; k<n3; k++){
               c1[i][j]+=a1[i][k]*b1[k][j];
           }
       }
   }
   for(int i=0; i<n1; i++){
       for(int j=0; j<n3; j++){
           cout<<c1[i][j]<<" ";
       }
       cout<<endl;



********To search an element in 2D array(sorted in all order) by moving to lower and higher elemnet depending on target;
bool search(int n,int m, int k){
    int a[n][m];
 for(int i=0; i<n; i++){
     for(int j=0; j<m; j++){
         cin>>a[i][j];
     }
 }
 int c=0; int r=m-1;
 while(c<n && r>=0){
     if(a[c][r]==k){
        return true;
     }
     else if(a[c][r]>k){
         r--;
     }
     else{
         c++;
     }
 }
   return false;
}


*******************Largest word in a sentence**********

int main(){
   char arr[299]="Khusnood alam is a very hardworkingandgood student";
   int i=0; int glob_count=0;
   int loc_count=0;
   while(arr[i]!='\0'){
   
   if(arr[i]!=' '){
       loc_count++;
   } else{
       loc_count=0;
   }
   if(glob_count<loc_count){
       glob_count=loc_count;
   }
   i++;
   }
   cout<<glob_count;
    return 0;
}

**********inserting and finding the key in Binary search tree*********


#include<bits/stdc++.h>
using namespace std;
struct node {
    struct node *lchild;
    int data;
    struct node *rchild;
};
struct node *root=NULL;
void insert(int key){
    struct node *t=root;
    struct node *r=NULL ,*p;
     if(root==NULL){
         p=new node;
         p->data=key;
         p->lchild=p->rchild=NULL;
         root =p;
         return ;
     }while(t!=NULL){
         r=t;
         if(key<t->data){
             t=t->lchild;
         }
         else if(key>t->data){
             t=t->rchild;
         }
         else{
             return ;
         }
         p=new node;
         p->data=key;
         p->lchild=p->rchild=NULL;
         if(key<r->data){
             r->lchild=p;
         }
         else{
             r->rchild=p;
         }
         
     }
     
}
void inorder(struct node *p){
    if(p!=0){
        inorder(p->lchild);
        cout<<p->data<<" ";
        inorder(p->rchild);
    }
}
struct node *search(int key){
    struct node *t=root;
    while(t!=0){
        if(key==t->data){
            return t;
        }
        else if(key<t->data){
            t=t->lchild;
        }
        else{
            t=t->rchild;
        }
        
    }
    return 0;
}

int main(){
    struct node *temp;
    insert(50);
     insert(40);
      insert(30);
       insert(20);
        insert(10);
         insert(60);
          insert(70);
          inorder(root);
          cout<<endl;
          temp=search(10);
          if(temp!=0){
              cout<<temp->data<<" ";
          }
          else{
              cout<<"element is not found"<<endl;
          }
    return 0;
}


**************Reversing a string************

void reverse(string s){
    if(s.size()==0){
        return ;
    }
    string ros=s.substr(1);
    reverse(ros);
    cout<<s[0];
}


*********replacing string with number under condition*********

void replacepi(string s){
     if(s.length()==0){
         return ;
     }
     if(s[0]=='p' && s[1]=='i'){
         cout<<"3.14";
         replacepi(s.substr(2));
     }
     else{
         cout<<s[0];
         replacepi(s.substr(1));
     }
}


*******Removing duplicate from string******

string remov_dupl(string s){
    if(s.size()==0){
        return "";
    }
    char ch=s[0];
    string ans=remov_dupl(s.substr(1));
    if(ch==ans[0]){
        return ans;
    }
    else{
        return ch+ans;
    }
    
}



********pushing all 'x' to last of string *************

string  pushbackx(string s){
    if(s.length()==0){
        return "";
    }
    char ch=s[0];
    string ans=pushbackx(s.substr(1));
    if(ch=='x'){
        return ans+ch;
    }
    else{
        return ch+ans;
    }
    
}



**********subsequence of string*************

void subsequence(string s, string ans){
    if(s.length()==0){
        cout<<ans<<endl;
        return;
    }
    char ch=s[0];
    string ros=s.substr(1);
    subsequence(ros,ans);
    subsequence(ros,ans+ch);
}

************stack*******************
#include<bits/stdc++.h>
using namespace std;
struct stackk{
    int size;
    int top;
    int *S;
};
void create(struct stackk *st){
    cout<<"Enter size";
    cin>>st->size;
    st->top=-1;
    st->S=new int[st->size];
}
void push(struct stackk *st, int x){
    if(st->top==st->size-1){
        cout<<"Stack overflow";
    }else{
        st->top++;
        st->S[st->top]=x;
    }
}
void display(struct stackk *st){
    for(int i=st->top; i>=0; i--){
        cout<<st->S[i]<<" ";
    }
    cout<<endl;
}
int pop(struct stackk *st){
    int x=-1;
    if(st->top<0){
        cout<<"Stack underflow";
    }else{
        x=st->S[st->top];
       st->top--;
    }
    return x;
}
int peek(struct stackk *st, int idx){
    int x=-1;
    if(st->top-idx+1<0){
        cout<<"invalid index";
    }else{
        x=st->S[st->top-idx+1];
        return x;
    }
}
int main(){
    struct stackk st;
    create(&st);
    push(&st,10);
     push(&st,20);
      push(&st,30);
       push(&st,40);
        push(&st,50);
         push(&st,60);
         cout<<pop(&st)<<endl;
         //cout<<peek(&st, 4)<<endl;
         display(&st);
    return 0;
}

