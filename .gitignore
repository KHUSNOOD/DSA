// All prime number between a,b
void is_prime(int x){
    int count=0;
    for(int i=2; i<x; i++){
        if(x%i==0){
           count++; 
        }
    }
    if(count==0){
        cout<<x<<" ";
    }
}


// N Fibonaccci number printing
void fibo(int n){
    long long int t1=0, t2=1;
    long long int temp;
    for(int i=1; i<=n; i++){
        temp=t1+t2;
        cout<<t1<<" ";
        t1=t2;
        t2=temp;
    }
}



// Factorial of a number N;
int  factorial(int n){
    int temp=1;
    for(int i=n; i>=1; i--){
        temp=temp*i;
    }
    return temp;
}


// Sum of N natural numbers;
int sum(int n){
    int sum=0;
    for(int i=1; i<=n; i++){
        sum+=i;
    }
    return sum;
}


// Bool result in cheacking a pythagoras triplet;
bool pythog(int x,int y, int z){
    int maxx=max(x,max(y,z));
    
    if(maxx*maxx==x*x+y*y ||maxx*maxx==x*x+z*z || maxx*maxx==z*z+y*y ){
        return true;
    }
    return false;
}



// Buble sorting technique for N array elements;
void buble_sort(int n, int arr[]){
    int counter=1;
    while(counter<n){
        for(int i=0;i<n-counter; i++){
            if(arr[i]>arr[i+1]){
                int temp=arr[i];
                arr[i]=arr[i+1];
                arr[i+1]=temp;
            }
        }
        counter++;
    }
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
}


// length of maximum contigious arthmetic subarray;
int  long_subarr(int n, int arr[]){
    int k1=0;
    
    vector<int> vec;
    for(int i=0; i<n-1; i++){
        k1=arr[i+1]-arr[i];
        vec.push_back(k1);
    }
    int maxcount=0;
    for(int i=0; i<n-1; i++){
        int count=0;
        for(int j=i; j<n-1; j++ ){
            if( vec[j]==vec[j+1]){
                count++;
            }
        }
        if(count>maxcount){
            maxcount=count;
        }
    }
    
    return maxcount+2;
}



// max-sum of  subarray in an array;
int  subarr_maxsum(int n, int arr[]){
    int max_sum=0;
    for(int i=0; i<n; i++){
        for(int j=i; j<n; j++){
             int sum=0;
            for(int k=i; k<=j; k++){
                sum+=arr[k];
            }
            if(sum>max_sum){
                max_sum=sum;
            }
        }
    }
    return max_sum;
}


// Rearring the array terms by all even numbers following by all odd numbers;
void evenfirst(int n, int arr[]){
    vector<int >vec1;
    vector<int>vec2;
    for(int i=0; i<n; i++){
        if(arr[i]%2==0){
            vec1.push_back(arr[i]);
        }
        else{
            vec2.push_back(arr[i]);
        }
    }
     for(int j=0; j<vec2.size(); j++){
        
            vec1.push_back(vec2[j]);
        
    }
    for(int k=0; k<n; k++){
        cout<<vec1[k]<<" ";
    }
}









